# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
"""
db.py
- ????? ?????? SQLite ?????: data.db
- ?????:
  users, sites, works, grid_readings, spares, emergencies, user_actions
- ????? CLI:
  python db.py --init        -> ????? ???????
  python db.py --seed-sites  -> ????? ????? ???????
  python db.py --stats       -> ??????? ?????
"""

import sys, os, datetime as dt
from typing import Optional
from sqlalchemy import (
    create_engine, Column, Integer, String, Date, Float, Boolean, Text, ForeignKey, DateTime
)
from sqlalchemy.orm import declarative_base, relationship, sessionmaker

DB_PATH = os.path.join(os.path.dirname(__file__), "data.db")
ENGINE = create_engine(f"sqlite:///{DB_PATH}", echo=False, future=True)
SessionLocal = sessionmaker(bind=ENGINE, autoflush=False, autocommit=False, future=True)
Base = declarative_base()

# ---------------------- Models ----------------------

class User(Base):
    __tablename__ = "users"
    id       = Column(Integer, primary_key=True)
    username = Column(String(80), unique=True, nullable=False)
    role     = Column(String(30), default="user")   # "admin" or "user"
    created_at = Column(DateTime, default=dt.datetime.utcnow)

class Site(Base):
    __tablename__ = "sites"
    id     = Column(Integer, primary_key=True)
    name   = Column(String(200), unique=True, nullable=False)
    region = Column(String(50), nullable=False)     # ???????/?????/?????/???? ?? ?????
    created_at = Column(DateTime, default=dt.datetime.utcnow)

class Work(Base):
    __tablename__ = "works"
    id       = Column(Integer, primary_key=True)
    date     = Column(Date, nullable=False)
    region   = Column(String(50), nullable=False)
    site_id  = Column(Integer, ForeignKey("sites.id"), nullable=False)
    site     = relationship("Site")
    owner    = Column(String(100))                  # ????? ??????
    job_type = Column(String(60), nullable=False)   # ??? ?????

    summary     = Column(Text)
    oil_liters  = Column(Float, default=0.0)
    oil_filter  = Column(Boolean, default=False)
    diesel_filter = Column(Boolean, default=False)
    air_filter    = Column(Boolean, default=False)

    hours_now  = Column(Float, default=0.0)
    hours_diff = Column(Float, default=0.0)
    l1 = Column(Float, default=0.0)
    l2 = Column(Float, default=0.0)
    l3 = Column(Float, default=0.0)
    kwh_now = Column(Float, default=0.0)

    executor = Column(String(120))
    driver   = Column(String(120))
    notes    = Column(Text)

    created_at = Column(DateTime, default=dt.datetime.utcnow)

    grid_reading = relationship("GridReading", back_populates="work", uselist=False)
    spares       = relationship("Spare", back_populates="work")
    emergencies  = relationship("Emergency", back_populates="linked_work")

class GridReading(Base):
    __tablename__ = "grid_readings"
    id        = Column(Integer, primary_key=True)
    work_id   = Column(Integer, ForeignKey("works.id"), nullable=True)  # ?? ???? ????? ?????
    work      = relationship("Work", back_populates="grid_reading")

    etype     = Column(String(20))  # ?????/?????
    kwh_prev  = Column(Float, default=0.0)
    kwh_now   = Column(Float, default=0.0)
    kwh_diff  = Column(Float, default=0.0)
    kwhr      = Column(Float, default=0.0)
    hours     = Column(Float, default=0.0)

    created_at = Column(DateTime, default=dt.datetime.utcnow)

class Spare(Base):
    __tablename__ = "spares"
    id      = Column(Integer, primary_key=True)
    work_id = Column(Integer, ForeignKey("works.id"), nullable=False)
    work    = relationship("Work", back_populates="spares")

    name    = Column(String(200), nullable=False)
    qty     = Column(Float, default=0.0)

    created_at = Column(DateTime, default=dt.datetime.utcnow)

class Emergency(Base):
    __tablename__ = "emergencies"
    id       = Column(Integer, primary_key=True)
    date     = Column(Date, nullable=False)
    region   = Column(String(50), nullable=False)
    site_id  = Column(Integer, ForeignKey("sites.id"), nullable=False)
    site     = relationship("Site")

    etype    = Column(String(20))  # ?????/?????
    alarm    = Column(String(200))
    source   = Column(String(120)) # ????????/????? ????/????
    category = Column(String(120)) # ?????? ?????/????? ????/?????
    notes    = Column(Text)

    linked_work_id = Column(Integer, ForeignKey("works.id"), nullable=True) # ??? ?????+???????+??????
    linked_work    = relationship("Work", back_populates="emergencies")

    created_at = Column(DateTime, default=dt.datetime.utcnow)

class UserAction(Base):
    __tablename__ = "user_actions"
    id        = Column(Integer, primary_key=True)
    username  = Column(String(80), nullable=False)
    action    = Column(String(120), nullable=False) # e.g., "ADD_WORK", "EXPORT_DETAIL"
    payload   = Column(Text)                        # JSON/?? ?????
    created_at = Column(DateTime, default=dt.datetime.utcnow)

# ---------------------- Utilities ----------------------

def init_db():
    Base.metadata.create_all(ENGINE)

def seed_sites(default_region: str = "???????"):
    sites_list = [
        "???? ??????? - ????","????? ???????","?????? ???","?????? ???","???-2","???-3","??? ???",
        "???????-1","???????-2","????? ??????","???????-1","???????-2","???????-3","???????-4","???????-5","???????-6","???????-7",
        "????? ?????? ????????????","???? ??????? ????? ??????","?? ???????","???? ?????","??????","?????? ???? ??????",
        "??? ???????-1","??? ???????-3","??? ????","????-2","????-3","????-4","????-5","????-6","????-7","????-8",
        "????????-1","????????-2","????????-3","????????-4","???? ??????","????? ???????-1","????? ???????-2","????? ???????-3",
        "?????-1","?????-2","?????-3","?????-4","?????-5","?????-6","?????-7","?????-8","???? ?????","???? ?????",
        "?? ????????","??????-1","??????-2","??????-3","??????-5","?? ???????","?????","??????-2",
        "??????? ????????-1","??????? ????????-2","???? ?? ????","????-1","????-2","????-3","????-5","????-6",
        "???? ????-1","???? ????-2","???? ?????","?? ????","?????? ????????-1","?????? ????????-2",
        "?????-1","?????-2","?????-3","?????-4","?????-5","?????-6",
        "???-1","???-2","???-3","???-4","???-5","???-6","???-7","??? ???","?? ?????",
        "???????-1","???????-2","???????-3","???????-4","???????-5","???? ??????","????? ?????","??? ?????",
        "???? ????","?????? ????","????-2","????-3","????-4","????-5","????-6","????? ????","??? ????","??? ?????",
        "????? ??????","?????","??? ?????","??? ??????","??? ??????","??? ?????","???????","??? ????","??? ???","???","??? ?????"
    ]
    with SessionLocal() as s:
        for name in sites_list:
            exists = s.query(Site).filter(Site.name == name).first()
            if not exists:
                s.add(Site(name=name, region=default_region))
        s.commit()

def stats():
    with SessionLocal() as s:
        sites = s.query(Site).count()
        works = s.query(Work).count()
        ems   = s.query(Emergency).count()
        sp    = s.query(Spare).count()
        gr    = s.query(GridReading).count()
        ua    = s.query(UserAction).count()
        print(f"Sites={sites}, Works={works}, Emergencies={ems}, Spares={sp}, GridReadings={gr}, UserActions={ua}")

# ---------------------- CLI ----------------------
if __name__ == "__main__":
    cmd = sys.argv[1] if len(sys.argv) > 1 else "--help"
    if cmd == "--init":
        init_db()
        print("OK: tables created in data.db")
    elif cmd == "--seed-sites":
        init_db()
        seed_sites(default_region="???????")
        print("OK: sites seeded")
    elif cmd == "--stats":
        stats()
    else:
        print("Usage:")
        print("  python db.py --init")
        print("  python db.py --seed-sites")
        print("  python db.py --stats")